# -*- coding: utf-8 -*-
"""GPT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y8nqSC6XIxEsPWNpz93qI78KaS_reUFH
"""

#!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt

with open('input.txt', 'r', encoding='utf-8') as f:
    text = f.read()

chars = sorted(list(set(text)))
vocab_size = len(chars)

stoi = { ch:i for i,ch in enumerate(chars) }
itos = { i:ch for i,ch in enumerate(chars) }
encode = lambda s: [stoi[c] for c in s] # encoder: take a string, output a list of integers
decode = lambda l: ''.join([itos[i] for i in l]) # decoder: take a list of integers, output a string

import torch
data = torch.tensor(encode(text),dtype=torch.long)
n = int(0.9*len(data))
train_data = data[:n]
val_data = data[n:]

torch.manual_seed(1337)
batch_size = 4 # how many independent sequences will we process in parallel?
block_size = 8 # what is the maximum context length for predictions?

def get_batch(split):
    # generate a small batch of data of inputs x and targets y
    data = train_data if split == 'train' else val_data
    ix = torch.randint(len(data) - block_size, (batch_size,))
    x = torch.stack([data[i:i+block_size] for i in ix])
    y = torch.stack([data[i+1:i+block_size+1] for i in ix])
    x,y = x.to(device),y.to(device) # when all the weights and random numbers are sent to GPU it is very fast
    return x, y

import torch.nn as nn
from torch.nn import functional as F
torch.manual_seed(1337)

batch_size = 64 # how many independent samples are going to be processed in parallel
block_size = 256 # what is the maximum context length for prediction
max_iters = 5001
eval_interval = 500
learning_rate = 3e-4 # small learning rates for larger networks
device = 'cuda' if torch.cuda.is_available() else 'cpu'
n_embd = 384
n_head = 6
n_layer = 6
dropout = 0.2
eval_iters = 200

class Head(nn.Module):
    """ one head of self attention """

    def __init__(self,head_size):
        super(Head,self).__init__()
        self.key = nn.Linear(n_embd, head_size,bias=False)
        self.query = nn.Linear(n_embd, head_size, bias=False)
        self.value = nn.Linear(n_embd, head_size,bias=False)
        self.register_buffer('tril',torch.tril(torch.ones(block_size,block_size)))

        self.dropout = nn.Dropout(dropout)

    def forward(self,x):
        B,T,C = x.shape
        k = self.key(x) # (B,T,C)
        q = self.query(x) # (B,T,C)
        wei  = q @ k.transpose(-2,-1) * C**-0.5 # since we the query ,keys using x so we need to normlaize using the embedding dimensions of every context in every sample in x
        wei = wei.masked_fill(self.tril[:T,:T] == 0, float('-inf'))
        wei = F.softmax(wei,dim=-1) # (B,T,T)
        wei = self.dropout(wei)
        v = self.value(x) # (B,T,C)
        out = wei @ v
        return out

class MultiHeadAttention(nn.Module):
  """ multiple heads of self-attention in parallel """
  def __init__(self,num_heads,head_size):
    super().__init__()
    self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])
    self.proj = nn.Linear(n_embd,n_embd)
    self.dropout = nn.Dropout(dropout)
  def forward(self,x):
    out = torch.cat([h(x) for h in self.heads],dim=-1)
    out = self.dropout(self.proj(out))
    return out
    # the ya re processed parallely and then they are concatenated in the last dimension
    # so they it can be passed to the next layer properly
    # since all the heads have batch and sequence length
    # so it in order to concatenate we can concatenate in the channel dimension as they multiple different channels
    # we concatenate over the channel dimension as we have multiple channels to communicate

class FeedForward(nn.Module):
  """ a simple linear layer followed by a non-linearity """
  def __init__(self,n_embd):
    super(FeedForward,self).__init__()
    self.net = nn.Sequential(
        nn.Linear(n_embd,4 * n_embd),
        nn.ReLU(),
        nn.Linear(4 * n_embd,n_embd), # this is the projection layer of the feedforward
        nn.Dropout(dropout)
    )

  def forward(self,x):
    return self.net(x)

class Block(nn.Module):
  """ Transformer block: communication followed by computation """
  def __init__(self,n_embd,n_head):
    super(Block,self).__init__()
    head_size = n_embd // n_head
    self.sa = MultiHeadAttention(n_head,head_size)
    self.ffwd = FeedForward(n_embd)
    self.ln1 = nn.LayerNorm(n_embd)
    self.ln2 = nn.LayerNorm(n_embd)
 # GPU is used to sent tensors
  def forward(self,x):
    x = x + self.sa(self.ln1(x)) # the communication between the nodes is done here
    x = x + self.ffwd(self.ln2(x)) # the computation is done here in order the nodes to understand what informations they got
    return x

class GPTLanguageModel(nn.Module):
    def __init__(self):
        super(GPTLanguageModel,self).__init__()
        self.token_embedding_table = nn.Embedding(vocab_size,n_embd)
        self.positional_embedding_table = nn.Embedding(block_size, n_embd)
        # self.sa_heads = MultiHeadAttention(4,n_embd//4) # 4 heads of 8 dimensional vectors
        # # we concatenate to give 32 the original one in the last dimension or the channel dimension
        # self.ffwd = FeedForward(n_embd)
        # this below * is given which unpacks the list as list is not allowed to be passed to nn.Sequential
        self.block = nn.Sequential(*[Block(n_embd,n_head=n_head) for _ in range(n_layer)])
        self.ln_f = nn.LayerNorm(n_embd)
        self.lm_head = nn.Linear(n_embd, vocab_size)

    def forward(self,idx,targets=None):
        B,T = idx.shape
        # idx and targets are both (B,T) tensor of integers
        tok_emb = self.token_embedding_table(idx)
        pos_emb = self.positional_embedding_table(torch.arange(T,device=device))
        x = tok_emb + pos_emb
        # x = self.sa_heads(x) # (B,T,C)
        # x = self.ffwd(x) # (B,T,C)
        x = self.block(x)
        logits = self.lm_head(x)

        if targets is None:
            loss = None
        else:
            B,T,C = logits.shape
            logits = logits.view(B*T,C)
            targets = targets.view(B*T)
            loss = F.cross_entropy(logits,targets)

        return logits,loss

    def generate(self,idx,max_new_tokens):
        for _ in range(max_new_tokens):
            idx_cond = idx[:,-block_size:]
            # the positional embedding table can only have embeddings for 8 charcaters in order to have max of 8 characters at the end
            # we used -block_size
            logits,loss = self(idx_cond)
            # focus on the last timestep
            logits = logits[:,-1,:]
            # apply softmax to get probabilities
            probs = F.softmax(logits,dim=-1)
            #sample from the probability distribution
            idx_next = torch.multinomial(probs,num_samples=1)
            # i am adding
            idx = torch.cat((idx,idx_next),dim=1) # adding a new element in dim=1

        return idx
# idering doe snot matter in python but matters in C++
def main():
    model = GPTLanguageModel()
    @torch.no_grad() # we give this when we do not use loss.backward()
    # as it does not have to store any intermediate in the memory thus making it memory efficient
    def estimate_loss():
        out = {}
        model.eval()
        for split in ['train','val']:
            losses = torch.zeros(eval_iters)
            for k in range(eval_iters):
                X,Y = get_batch(split)
                logits,loss = model(X,Y)
                losses[k] = loss.item()
            out[split] = losses.mean()
        model.train()
        return out
    m = model.to(device) # All the tables and weights are send to the GPU is order to do faster computation
    print('Model transferred successfully')
    optimizer = torch.optim.AdamW(model.parameters(),lr=learning_rate)

    for iters in range(max_iters):
        if iters % eval_interval == 0:
            losses = estimate_loss()
            print(f"step {iters}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")

        xb,yb = get_batch('train')

        logits,loss = model(xb,yb)
        optimizer.zero_grad(set_to_none=True)
        loss.backward()
        optimizer.step()

    context = torch.zeros((1,1),dtype=torch.long,device=device)
    print(decode(m.generate(context, max_new_tokens=500)[0].tolist()))

    open('more.txt', 'w').write(decode(m.generate(context, max_new_tokens=10000)[0].tolist()))

    torch.save(model.state_dict(), 'GPT.pth')

